2058. Find the Minimum and Maximum Number of Nodes Between Critical Points

A critical point in a linked list is defined as either a local maxima or a local minima.
A node is a local maxima if the current node has a value strictly greater than the previous node and the next node
A node is a local minima if the current node has a value strictly smaller than the previous node and the next node.
Note that a node can only be a local maxima/minima if there exists both a previous node and a next node.
Given a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance
is the minimum distance between any two distinct critical points and maxDistance is the maximum distance between any two distinct critical points. 
If there are fewer than two critical points, return [-1, -1].

class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int firstCPI=-1,prevCPI=-1;
        int curindex=1;
        ListNode cur=head.next;
        ListNode prev=head;
        int res[]=new int[2];
        res[0]=Integer.MAX_VALUE;
        while(cur.next!=null){
            ListNode nextnode=cur.next;
            if((cur.val<nextnode.val && cur.val<prev.val)||
                (cur.val>nextnode.val && cur.val>prev.val)){
                    if(prevCPI==-1){
                        firstCPI=curindex;
                        prevCPI=curindex;
                    }
                    else{
                        res[0]=Math.min(res[0],curindex-prevCPI);
                        prevCPI=curindex;
                    }
                }
                prev=prev.next;
                cur=cur.next;
                curindex++;
        }
        if(firstCPI!=-1 && res[0]!=Integer.MAX_VALUE){
            res[1]=prevCPI-firstCPI;
        }
        else{
            res[0]=-1;
            res[1]=-1;
        }
        return res;  
    }
}

 The provided Java code aims to find and calculate the minimum and maximum distances between critical points in a linked list. Let's break down the logic step by step using the context provided:

1. **Initialization and Setup**: The code initializes variables to track the index of the first critical point (`firstCPI`) and the index of the previous critical point (`prevCPI`). It also sets the current index to 1, initializes two pointers (`prev` and `cur`) to the head and the next node of the linked list, respectively, and creates an array `res` to store the results, with the initial minimum distance set to the maximum integer value and both distances (minimum and maximum) initialized to -1.

2. **Iterating Through the Linked List**: The code enters a while loop that continues as long as the next node of the current node exists. Within the loop:
   - It captures the next node from the current node.
   - It checks whether the current node is a local minima or local maxima based on its value in relation to the next and previous nodes.
   - If a critical point is found:
     - If it is the first critical point, the code updates the `firstCPI` and `prevCPI`.
     - If it is not the first critical point, it calculates and updates the minimum distance (`res[0]`) between critical points and updates the `prevCPI`.
   - The pointers (`prev`, `cur`) are moved forward along with the current index.

3. **Calculating Distances**: After the loop exits, the code checks if there is at least one critical point and updates the maximum distance (`res[1]`) if both the first critical point and the minimum distance exist. If no critical points are found, it sets both distances to -1.

4. **Final Result**: Finally, the code returns the array `res` containing the calculated minimum and maximum distances between critical points in the linked list.

This logic efficiently iterates through the linked list nodes, identifies the critical points, calculates the distances, and returns the results in the specified format.  
