
1518. Water Bottles
there are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.

class Solution {
    public int numWaterBottles(int numBottles, int numExchange) {
        int drank=numBottles;
        while(numBottles>=numExchange){
            int exchanged=numBottles/numExchange;
            int extraEmptybottle=numBottles%numExchange;
            drank+=exchanged;
            numBottles=exchanged+extraEmptybottle;
        }
        return drank;
        
    }
}

  The logic of the given `numWaterBottles` method is to calculate the maximum number of water bottles that can be drunk given a certain number of initial bottles and a required number for exchange. Here's how the logic works:

1. Initialize the variable `drank` with the initial number of bottles, as this represents the number of bottles initially drunk.

2. Use a while loop to continue the exchange process as long as the current number of bottles is greater than or equal to the number required for exchange (`numExchange`).

3. Inside the loop, calculate the number of bottles that can be exchanged for new ones by dividing the current number of bottles by `numExchange`. This gives the amount of full exchanges that can be made.

4. Next, calculate the number of remaining empty bottles after the full exchanges by finding the modulo of `numBottles` and `numExchange`.

5. Add the number of exchanged bottles to the `drank` count to keep track of the total number of bottles drunk so far.

6. Update the `numBottles` variable to the sum of the exchanged bottles (from step 3) and the remaining empty bottles (from step 4). This represents the new total number of bottles after exchange.

7. Repeat the process until the `numBottles` is less than `numExchange`.

8. Finally, return the total number of bottles drunk, represented by the variable `drank`.

In summary, the method calculates the total number of water bottles that can be drunk, considering the exchange of empty bottles for full ones according to the given `numExchange` value.  
